#!/bin/bash
###############################################################################
# Name: amc
# Description: amc is the client tool for simplifying shell commands
# Author: John Deng (john.deng@outlook.com)
# Updated: 2017-02-11
###############################################################################

source "${HI_CLI_HOME}/bin/utils"

function show_exec_usage() {
  show_version
  echo "usages: "
  echo "  ${hi_app} heketi exec pod=the-pod-id cmd="'"'"ls -l"'"'"  "
  echo "  ${hi_app} heketi exec pod=the-pod-id cmd="'"'"any-shell-command"'"'"  "
}

function exec_command_on_volume() {
  
  log_debug "exec_command_on_volume pv: $1 cmd: $2 "

  if [ "$2" == "" ]; then
    show_pv_usage
    exit
  fi

  # NOTE: assume that glusterfs is deployed on default project
  current_project=$(oc projects | grep "*" | awk '{print $2}')
  if [ "$current_project" != "default" ]; then
    oc project default
  fi 

  volume=$(oc describe pv $1 | grep Path | awk '{print $2}' | sed s/vol_//g) 
  cmd=$2

  log_debug "volume: $volume"

  # get all glusterfs pods
  glusterfs_pods=$(oc get po -n default | grep glusterfs | awk '{print $1}')

  if [ "$volume" != "" ] ; then
    
    # get all volume path
    volumes=$(awk "/${volume}/,/Name/" <<<  "$(heketi-cli topology info)" | grep Path | awk '{print $2}')
    
    # get all glusterfs pods
    glusterfs_pods=$(oc get po -n default | grep glusterfs | awk '{print $1}')

    while read p; do
      oc rsh $p <<EOF
      echo pod: $p
      echo "$volumes" | while read vol; do
        if [ -d "\${vol}" ]; then
          final_cmd="$(echo ${cmd} | sed 's/{}/\${vol}/g')"
          echo "command: \${final_cmd}"
          \${final_cmd}
        fi
      done
EOF
    done <<< "$glusterfs_pods"
  fi

  oc project $current_project
}

function exec_command() {
  
  log_info "execute command on pod: $1 cmd: $2"

  if [ "$2" == "" ] || [ "$1" == "" ]; then
    show_pv_usage
    exit
  fi

  oc rsh $pod <<EOF
    echo ${cmd}
    ${cmd}
EOF

  oc project $current_project
}

function delete_pv() {
  oc whoami > /dev/null   
  if [ $? != 0 ]; then
    log_error "you are not allowed to delete pv"
    return 1
  fi
  pv_name=$1
  if [ "${pv_name}" == "" ]; 
  then
    log_warn "pv name is null"
    exit
  fi
  if [ "$delete" == "delete" ]; then 
    log_info "deleting pv ${pv_name}, please wait ..."
    pv_info=$(oc get pv ${pv_name} -o json)
    if [ $? == 0 ]; 
    then
      log_debug "${pv_info}"

      parse_json vol_path "${pv_info}" spec glusterfs path
      
      volume=${vol_path/vol_/}
      heketi-cli volume delete ${volume}
      oc delete pv ${pv_name}
    else
      log_warn "pv ${pv_name} not found"
    fi
  fi
}

function delete_pvc() {
  oc whoami > /dev/null   
  if [ $? != 0 ]; then
    log_error "you are not allowed to delete pvc"
    return 1
  fi
  log_debug $pv
  pv_name=$(oc get pvc | grep ${name} | awk '{print $3}')
  log_debug ${pv_name}

  if [ "${pv_name}" != "" ] && [ $(oc get pvc | grep "${pv_name}" | grep "Bound" | wc -l) != 0 ]; 
  then
    delete_pv ${pv_name}
  fi
  log_info  "deleting pvc, name: $name"
  if [ $(oc get pvc | grep ${name} | wc -l) != 0 ]; 
  then
    log_debug "delete pvc $name"
    oc delete pvc ${name}
    log_debug "pvc ${name} is deleted"
  else
    log_warn "pvc ${name} not found"  
  fi
}

function create_pv() {
  log_debug "create_pv is called"

  oc whoami > /dev/null
  if [ $? != 0 ]; then
    log_error "you are not allowed to create pv"
    return 1
  fi

  log_info "creating pv, please wait ..."

  mkdir -p ${module_dir}/endpoints
  ep_file="${module_dir}/endpoints/endpoints.json"
  
  heketi-cli volume create --size=${size} --persistent-volume --persistent-volume-endpoint=heketi-storage-endpoints > ${ep_file}

  ep=$(cat ${ep_file})

  log_debug "created pv with ep: ${ep}"

  if [ "${ep}" == "" ]; then
    log_error "volume is not created"
    return 1
  fi

  parse_json pv_name "${ep}" metadata name

  if [ $? != 0 ]; then
    log_error "wrong endpoint"
    return 2
  fi

  log_info "creating endpoint"
  oc create -f ${ep_file}

  parse_json vol_path "${ep}" spec glusterfs path

  # rm -rf ${ep_file}
  mkdir -p ${working_dir}/endpoints/
  mv ${ep_file} ${working_dir}/endpoints/${vol_path}.json

  if [ "$cmd" == "" ]; then
    cmd="chmod 777 {}"
  fi
  if [ "$uid" != "" ]; then
    cmd="chown ${uid}:${uid} {}"
  fi
  log_debug "exec_command_on_volume ${pv_name} ${cmd}"
  exec_command_on_volume "${pv_name}" "${cmd}"
}

function create_pvc() {
  oc whoami > /dev/null   
  if [ $? != 0 ]; then
    log_error "you are not allowed to create pvc"
    return 1
  fi
  echo "create pvc name: ${name} size: ${size}"
  if [ "${mode}" == "" ]; then
    mode="ReadWriteMany"
  fi  

  oc create -f - <<_EOF_
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${name}
spec:
  accessModes:
  - ${mode}
  resources:
    requests:
      storage: ${size}Gi
status: {}
_EOF_
}

###############################################################################
# main entry
function main() {
  #log "main loop ..."

  if [ "$version" == "version" ]; then 
    show_version
    exit
  fi

  if [ "$pv" != "" ]; then
    if [ "$help" == "help" ]; then 
      show_pv_usage
      exit
    fi

    network_option=''
    if [ "$net" == "vpn" ] || [ "$vpn" == "vpn" ] ; then
      network_option=" -l network=vpn "
    fi

    # export HEKETI_CLI_SERVER="http://$(oc get route -n default $network_option | grep heketi | awk '{print $2}')"
    echo connecting to heketi server $HEKETI_CLI_SERVER

    if [ "$delete" == "delete" ] && [ "$pv" != "pv" ]; then 
      delete_pv
    elif [ "$create" == "create" ] && [ $size > 0 ] ; then
      create_pv
    elif [ "$edit" == "edit" ] && [ "$cmd" != "" ] ; then
      exec_command_on_volume "$pv" "$cmd"
    fi
  fi

  if [ "$pvc" != "" ]; then
    if [ "$create" == "create" ] && [ $size > 0 ] ; then
      create_pvc
    elif [ "$delete" == "delete" ]; then
      echo  "delete pvc, name: $name"
      
      if [ "$pv" = "pv" ]; then
        pv=$(oc get pvc | grep $name | awk '{print $3}')
        if [ "$pv" != "" ]; then
          delete_pv
        fi
      fi
      oc delete pvc $name
    fi

  fi

  if [ "$exec" != "" ]; then
    log "debug"
    if [ "$help" == "help" ]; then 
      log "debug"
      show_exec_usage
    elif [ "$cmd" != "" ] && [ "$pod" != "" ] ; then
      log "debug"
      exec_command "$pod" "$cmd"
    elif [ "$cmd" != "" ] && [ "$pods" != "" ] ; then
      log "debug"
      exec_command "$pods" "$cmd" "batch"
    fi
  fi
}
